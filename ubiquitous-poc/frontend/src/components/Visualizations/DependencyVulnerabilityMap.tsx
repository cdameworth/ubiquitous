import React, { useEffect, useState, useRef } from 'react';
import * as d3 from 'd3';
import './DependencyVulnerabilityMap.css';

interface DependencyVulnerability {
  id: string;
  packageName: string;
  version: string;
  vulnerabilities: PackageVulnerability[];
  directDependency: boolean;
  dependentServices: string[];
  ecosystem: 'npm' | 'pip' | 'maven' | 'nuget' | 'go' | 'cargo' | 'gem';
  lastUpdated: Date;
  latestVersion: string;
  license: string;
  maintainerStatus: 'active' | 'deprecated' | 'abandoned';
  usageCount: number;
  criticalPath: boolean;
}

interface PackageVulnerability {
  id: string;
  cveId?: string;
  severity: 'critical' | 'high' | 'medium' | 'low';
  cvss: number;
  title: string;
  description: string;
  publishedDate: Date;
  fixedVersion?: string;
  exploitAvailable: boolean;
  patchAvailable: boolean;
  category: 'rce' | 'xss' | 'sql_injection' | 'dos' | 'privilege_escalation' | 'information_disclosure' | 'other';
  affectedVersionRange: string;
  references: string[];
}

interface DependencyNode extends d3.SimulationNodeDatum {
  id: string;
  packageName: string;
  version: string;
  vulnerabilityCount: number;
  maxSeverity: string;
  directDependency: boolean;
  dependentServices: string[];
  ecosystem: string;
  criticalPath: boolean;
  size: number;
}

interface DependencyLink extends d3.SimulationLinkDatum<DependencyNode> {
  id: string;
  sourceId: string;
  targetId: string;
  type: 'depends_on' | 'used_by';
}

const DependencyVulnerabilityMap: React.FC = () => {
  const [dependencies, setDependencies] = useState<DependencyVulnerability[]>([]);
  const [filteredDependencies, setFilteredDependencies] = useState<DependencyVulnerability[]>([]);
  const [selectedPackage, setSelectedPackage] = useState<DependencyVulnerability | null>(null);
  const [filters, setFilters] = useState({
    ecosystem: 'all',
    severity: 'all',
    dependencyType: 'all',
    maintainerStatus: 'all'
  });
  const [searchTerm, setSearchTerm] = useState('');
  const [viewMode, setViewMode] = useState<'graph' | 'tree' | 'list'>('graph');
  const [loading, setLoading] = useState(true);
  
  const svgRef = useRef<SVGSVGElement>(null);
  const tooltipRef = useRef<HTMLDivElement>(null);

  const mockDependencies: DependencyVulnerability[] = [
    {
      id: 'dep-1',
      packageName: 'lodash',
      version: '4.17.20',
      directDependency: true,
      dependentServices: ['trading-api', 'portfolio-service', 'risk-calculator'],
      ecosystem: 'npm',
      lastUpdated: new Date('2023-08-15'),
      latestVersion: '4.17.21',
      license: 'MIT',
      maintainerStatus: 'active',
      usageCount: 127,
      criticalPath: true,
      vulnerabilities: [
        {
          id: 'vuln-1',
          cveId: 'CVE-2021-23337',
          severity: 'high',
          cvss: 7.2,
          title: 'Command Injection in lodash',
          description: 'Lodash versions prior to 4.17.21 are vulnerable to command injection via the template function.',
          publishedDate: new Date('2021-02-15'),
          fixedVersion: '4.17.21',
          exploitAvailable: true,
          patchAvailable: true,
          category: 'rce',
          affectedVersionRange: '<4.17.21',
          references: [
            'https://github.com/lodash/lodash/security/advisories/GHSA-35jh-r3h4-6jhm',
            'https://nvd.nist.gov/vuln/detail/CVE-2021-23337'
          ]
        }
      ]
    },
    {
      id: 'dep-2',
      packageName: 'express',
      version: '4.17.1',
      directDependency: true,
      dependentServices: ['trading-api', 'auth-service'],
      ecosystem: 'npm',
      lastUpdated: new Date('2023-09-01'),
      latestVersion: '4.18.2',
      license: 'MIT',
      maintainerStatus: 'active',
      usageCount: 45,
      criticalPath: true,
      vulnerabilities: [
        {
          id: 'vuln-2',
          cveId: 'CVE-2022-24999',
          severity: 'medium',
          cvss: 5.3,
          title: 'Path Traversal in Express',
          description: 'Express.js prior to 4.18.2 is vulnerable to path traversal attacks.',
          publishedDate: new Date('2022-03-20'),
          fixedVersion: '4.18.2',
          exploitAvailable: false,
          patchAvailable: true,
          category: 'information_disclosure',
          affectedVersionRange: '<4.18.2',
          references: [
            'https://github.com/expressjs/express/security/advisories/GHSA-rv95-896h-c2vc'
          ]
        }
      ]
    },
    {
      id: 'dep-3',
      packageName: 'requests',
      version: '2.25.1',
      directDependency: true,
      dependentServices: ['data-pipeline', 'risk-calculator'],
      ecosystem: 'pip',
      lastUpdated: new Date('2023-07-10'),
      latestVersion: '2.31.0',
      license: 'Apache-2.0',
      maintainerStatus: 'active',
      usageCount: 89,
      criticalPath: false,
      vulnerabilities: [
        {
          id: 'vuln-3',
          cveId: 'CVE-2023-32681',
          severity: 'critical',
          cvss: 9.8,
          title: 'Unverified HTTPS requests in Python requests',
          description: 'Requests allows unverified HTTPS requests by default in certain configurations.',
          publishedDate: new Date('2023-05-22'),
          fixedVersion: '2.31.0',
          exploitAvailable: true,
          patchAvailable: true,
          category: 'information_disclosure',
          affectedVersionRange: '<2.31.0',
          references: [
            'https://github.com/psf/requests/security/advisories/GHSA-j8r2-6x86-q33q'
          ]
        }
      ]
    },
    {
      id: 'dep-4',
      packageName: 'jackson-databind',
      version: '2.12.3',
      directDependency: false,
      dependentServices: ['portfolio-service'],
      ecosystem: 'maven',
      lastUpdated: new Date('2023-06-28'),
      latestVersion: '2.15.2',
      license: 'Apache-2.0',
      maintainerStatus: 'active',
      usageCount: 23,
      criticalPath: true,
      vulnerabilities: [
        {
          id: 'vuln-4',
          cveId: 'CVE-2022-42003',
          severity: 'critical',
          cvss: 9.8,
          title: 'Deserialization vulnerability in Jackson',
          description: 'Jackson Databind vulnerable to unsafe deserialization.',
          publishedDate: new Date('2022-10-02'),
          fixedVersion: '2.13.4.1',
          exploitAvailable: true,
          patchAvailable: true,
          category: 'rce',
          affectedVersionRange: '<2.13.4.1',
          references: [
            'https://github.com/FasterXML/jackson-databind/security/advisories/GHSA-jjjh-jjxp-wpff'
          ]
        }
      ]
    },
    {
      id: 'dep-5',
      packageName: 'log4j-core',
      version: '2.14.1',
      directDependency: false,
      dependentServices: ['trading-api', 'portfolio-service', 'risk-calculator'],
      ecosystem: 'maven',
      lastUpdated: new Date('2023-05-15'),
      latestVersion: '2.20.0',
      license: 'Apache-2.0',
      maintainerStatus: 'active',
      usageCount: 156,
      criticalPath: true,
      vulnerabilities: [
        {
          id: 'vuln-5',
          cveId: 'CVE-2021-44228',
          severity: 'critical',
          cvss: 10.0,
          title: 'Log4Shell RCE Vulnerability',
          description: 'Apache Log4j2 JNDI features do not protect against attacker controlled LDAP and other JNDI related endpoints.',
          publishedDate: new Date('2021-12-09'),
          fixedVersion: '2.15.0',
          exploitAvailable: true,
          patchAvailable: true,
          category: 'rce',
          affectedVersionRange: '>=2.0-beta9, <2.15.0',
          references: [
            'https://nvd.nist.gov/vuln/detail/CVE-2021-44228',
            'https://logging.apache.org/log4j/2.x/security.html'
          ]
        }
      ]
    }
  ];

  useEffect(() => {
    // Simulate loading delay
    const timer = setTimeout(() => {
      setDependencies(mockDependencies);
      setFilteredDependencies(mockDependencies);
      setLoading(false);
    }, 1000);

    return () => clearTimeout(timer);
  }, []);

  useEffect(() => {
    let filtered = dependencies.filter(dep => {
      const matchesSearch = searchTerm === '' || 
        dep.packageName.toLowerCase().includes(searchTerm.toLowerCase()) ||
        dep.dependentServices.some(service => 
          service.toLowerCase().includes(searchTerm.toLowerCase())
        );

      const matchesEcosystem = filters.ecosystem === 'all' || 
        dep.ecosystem === filters.ecosystem;

      const matchesSeverity = filters.severity === 'all' ||
        dep.vulnerabilities.some(vuln => vuln.severity === filters.severity);

      const matchesDependencyType = filters.dependencyType === 'all' ||
        (filters.dependencyType === 'direct' && dep.directDependency) ||
        (filters.dependencyType === 'transitive' && !dep.directDependency);

      const matchesMaintainerStatus = filters.maintainerStatus === 'all' ||
        dep.maintainerStatus === filters.maintainerStatus;

      return matchesSearch && matchesEcosystem && matchesSeverity && 
             matchesDependencyType && matchesMaintainerStatus;
    });

    setFilteredDependencies(filtered);
  }, [dependencies, searchTerm, filters]);

  useEffect(() => {
    if (viewMode === 'graph' && filteredDependencies.length > 0) {
      renderGraph();
    }
  }, [filteredDependencies, viewMode]);

  const renderGraph = () => {
    if (!svgRef.current) return;

    const svg = d3.select(svgRef.current);
    svg.selectAll("*").remove();

    const container = svg.append("g");
    const width = 800;
    const height = 600;

    // Create nodes and links
    const nodes: DependencyNode[] = filteredDependencies.map(dep => ({
      id: dep.id,
      packageName: dep.packageName,
      version: dep.version,
      vulnerabilityCount: dep.vulnerabilities.length,
      maxSeverity: getMaxSeverity(dep.vulnerabilities),
      directDependency: dep.directDependency,
      dependentServices: dep.dependentServices,
      ecosystem: dep.ecosystem,
      criticalPath: dep.criticalPath,
      size: Math.max(20, dep.usageCount / 5)
    }));

    const links: DependencyLink[] = [];
    
    // Create links between dependencies (simplified for demo)
    nodes.forEach((node, i) => {
      if (i > 0) {
        links.push({
          id: `link-${i}`,
          source: nodes[i - 1],
          target: node,
          sourceId: nodes[i - 1].id,
          targetId: node.id,
          type: 'depends_on'
        });
      }
    });

    const simulation = d3.forceSimulation(nodes)
      .force("link", d3.forceLink(links).id((d: any) => d.id))
      .force("charge", d3.forceManyBody().strength(-300))
      .force("center", d3.forceCenter(width / 2, height / 2))
      .force("collision", d3.forceCollide().radius(d => (d as DependencyNode).size + 5));

    // Add zoom behavior
    const zoom = d3.zoom<SVGSVGElement, unknown>()
      .scaleExtent([0.1, 4])
      .on("zoom", (event) => {
        container.attr("transform", event.transform);
      });

    svg.call(zoom as any);

    // Add links
    const link = container.append("g")
      .selectAll("line")
      .data(links)
      .enter().append("line")
      .attr("class", "dependency-link")
      .attr("stroke", "#999")
      .attr("stroke-opacity", 0.6)
      .attr("stroke-width", 2);

    // Add nodes
    const node = container.append("g")
      .selectAll("circle")
      .data(nodes)
      .enter().append("circle")
      .attr("class", "dependency-node")
      .attr("r", d => d.size)
      .attr("fill", d => getSeverityColor(d.maxSeverity))
      .attr("stroke", d => d.criticalPath ? "#dc2626" : "#fff")
      .attr("stroke-width", d => d.criticalPath ? 3 : 2)
      .call(d3.drag<SVGCircleElement, DependencyNode>()
        .on("start", dragstarted)
        .on("drag", dragged)
        .on("end", dragended) as any);

    // Add labels
    const label = container.append("g")
      .selectAll("text")
      .data(nodes)
      .enter().append("text")
      .attr("class", "node-label")
      .attr("text-anchor", "middle")
      .attr("dy", "0.35em")
      .style("font-size", "10px")
      .style("font-weight", "bold")
      .style("fill", "#fff")
      .style("pointer-events", "none")
      .text(d => d.packageName);

    // Add tooltip interactions
    node
      .on("mouseover", (event, d) => {
        showTooltip(event, d);
      })
      .on("mouseout", () => {
        hideTooltip();
      })
      .on("click", (event, d) => {
        const dependency = dependencies.find(dep => dep.id === d.id);
        if (dependency) {
          setSelectedPackage(dependency);
        }
      });

    simulation.on("tick", () => {
      link
        .attr("x1", (d: any) => d.source.x)
        .attr("y1", (d: any) => d.source.y)
        .attr("x2", (d: any) => d.target.x)
        .attr("y2", (d: any) => d.target.y);

      node
        .attr("cx", d => d.x!)
        .attr("cy", d => d.y!);

      label
        .attr("x", d => d.x!)
        .attr("y", d => d.y!);
    });

    function dragstarted(event: any, d: DependencyNode) {
      if (!event.active) simulation.alphaTarget(0.3).restart();
      d.fx = d.x;
      d.fy = d.y;
    }

    function dragged(event: any, d: DependencyNode) {
      d.fx = event.x;
      d.fy = event.y;
    }

    function dragended(event: any, d: DependencyNode) {
      if (!event.active) simulation.alphaTarget(0);
      d.fx = null;
      d.fy = null;
    }
  };

  const getMaxSeverity = (vulnerabilities: PackageVulnerability[]): string => {
    const severityOrder = { 'critical': 4, 'high': 3, 'medium': 2, 'low': 1 };
    return vulnerabilities.reduce((max, vuln) => 
      severityOrder[vuln.severity] > severityOrder[max as keyof typeof severityOrder] 
        ? vuln.severity 
        : max
    , 'low');
  };

  const getSeverityColor = (severity: string): string => {
    const colors = {
      'critical': '#dc2626',
      'high': '#ea580c',
      'medium': '#d97706',
      'low': '#16a34a'
    };
    return colors[severity as keyof typeof colors] || '#6b7280';
  };

  const showTooltip = (event: MouseEvent, d: DependencyNode) => {
    if (!tooltipRef.current) return;

    const tooltip = tooltipRef.current;
    tooltip.style.opacity = '1';
    tooltip.style.left = `${event.pageX + 10}px`;
    tooltip.style.top = `${event.pageY - 10}px`;
    
    tooltip.innerHTML = `
      <div class="tooltip-title">${d.packageName} v${d.version}</div>
      <div class="tooltip-content">
        <div>Vulnerabilities: ${d.vulnerabilityCount}</div>
        <div>Max Severity: ${d.maxSeverity}</div>
        <div>Ecosystem: ${d.ecosystem}</div>
        <div>Usage Count: ${d.dependentServices.length} services</div>
        ${d.criticalPath ? '<div class="critical-path">⚠️ Critical Path</div>' : ''}
      </div>
    `;
  };

  const hideTooltip = () => {
    if (tooltipRef.current) {
      tooltipRef.current.style.opacity = '0';
    }
  };

  const getSeverityStats = () => {
    const stats = { critical: 0, high: 0, medium: 0, low: 0 };
    filteredDependencies.forEach(dep => {
      dep.vulnerabilities.forEach(vuln => {
        stats[vuln.severity]++;
      });
    });
    return stats;
  };

  const renderTreeView = () => {
    return (
      <div className="tree-view">
        {filteredDependencies.map(dep => (
          <div key={dep.id} className="tree-node">
            <div className="tree-node-header" onClick={() => setSelectedPackage(dep)}>
              <span className={`ecosystem-icon ${dep.ecosystem}`}>{dep.ecosystem}</span>
              <span className="package-name">{dep.packageName}</span>
              <span className="package-version">v{dep.version}</span>
              {dep.vulnerabilities.length > 0 && (
                <span className={`vulnerability-count ${getMaxSeverity(dep.vulnerabilities)}`}>
                  {dep.vulnerabilities.length} vulnerabilities
                </span>
              )}
              {dep.criticalPath && <span className="critical-path-indicator">⚠️</span>}
            </div>
            <div className="tree-node-services">
              Used by: {dep.dependentServices.join(', ')}
            </div>
          </div>
        ))}
      </div>
    );
  };

  const renderListView = () => {
    return (
      <div className="dependency-list">
        {filteredDependencies.map(dep => (
          <div key={dep.id} className={`dependency-item ${getMaxSeverity(dep.vulnerabilities)}`}>
            <div className="dependency-header">
              <div className="dependency-info">
                <h3>{dep.packageName}</h3>
                <div className="dependency-meta">
                  <span>v{dep.version}</span>
                  <span>{dep.ecosystem}</span>
                  <span>{dep.directDependency ? 'Direct' : 'Transitive'}</span>
                  <span>{dep.maintainerStatus}</span>
                </div>
              </div>
              <div className="dependency-badges">
                <span className={`vulnerability-badge ${getMaxSeverity(dep.vulnerabilities)}`}>
                  {dep.vulnerabilities.length} vulnerabilities
                </span>
                {dep.criticalPath && <span className="critical-path-badge">Critical Path</span>}
                {dep.latestVersion !== dep.version && (
                  <span className="outdated-badge">Update Available: {dep.latestVersion}</span>
                )}
              </div>
            </div>
            <div className="dependency-services">
              <strong>Used by:</strong> {dep.dependentServices.join(', ')}
            </div>
            <div className="dependency-vulnerabilities">
              {dep.vulnerabilities.map(vuln => (
                <div key={vuln.id} className={`vulnerability-summary ${vuln.severity}`}>
                  <span className="vuln-title">{vuln.title}</span>
                  <span className="vuln-cvss">CVSS: {vuln.cvss}</span>
                  {vuln.cveId && <span className="vuln-cve">{vuln.cveId}</span>}
                </div>
              ))}
            </div>
          </div>
        ))}
      </div>
    );
  };

  const severityStats = getSeverityStats();

  if (loading) {
    return (
      <div className="dependency-map-loading">
        <div className="spinner"></div>
        <p>Scanning dependency tree...</p>
      </div>
    );
  }

  return (
    <div className="dependency-vulnerability-map">
      <div className="dependency-map-header">
        <div>
          <h2 className="map-title">Dependency Vulnerability Map</h2>
          <p className="map-subtitle">Interactive visualization of package dependencies and their vulnerabilities</p>
        </div>
        <div className="map-actions">
          <button className="scan-button">
            <span>🔄</span> Rescan Dependencies
          </button>
          <button className="export-button">
            <span>📊</span> Export Report
          </button>
        </div>
      </div>

      {/* Vulnerability Stats */}
      <div className="vulnerability-overview">
        <div className={`stat-item critical`}>
          <div className="stat-number">{severityStats.critical}</div>
          <div className="stat-label">Critical</div>
        </div>
        <div className={`stat-item high`}>
          <div className="stat-number">{severityStats.high}</div>
          <div className="stat-label">High</div>
        </div>
        <div className={`stat-item medium`}>
          <div className="stat-number">{severityStats.medium}</div>
          <div className="stat-label">Medium</div>
        </div>
        <div className={`stat-item low`}>
          <div className="stat-number">{severityStats.low}</div>
          <div className="stat-label">Low</div>
        </div>
        <div className="stat-item total">
          <div className="stat-number">{filteredDependencies.length}</div>
          <div className="stat-label">Total Packages</div>
        </div>
      </div>

      {/* Filters */}
      <div className="dependency-filters">
        <div className="filter-row">
          <div className="search-group">
            <input
              type="text"
              className="search-input"
              placeholder="Search packages or services..."
              value={searchTerm}
              onChange={(e) => setSearchTerm(e.target.value)}
            />
          </div>
          
          <div className="filter-group">
            <label className="filter-label">Ecosystem</label>
            <select 
              className="filter-select"
              value={filters.ecosystem}
              onChange={(e) => setFilters({...filters, ecosystem: e.target.value})}
            >
              <option value="all">All Ecosystems</option>
              <option value="npm">npm</option>
              <option value="pip">pip</option>
              <option value="maven">maven</option>
              <option value="nuget">nuget</option>
              <option value="go">go</option>
              <option value="cargo">cargo</option>
              <option value="gem">gem</option>
            </select>
          </div>

          <div className="filter-group">
            <label className="filter-label">Severity</label>
            <select 
              className="filter-select"
              value={filters.severity}
              onChange={(e) => setFilters({...filters, severity: e.target.value})}
            >
              <option value="all">All Severities</option>
              <option value="critical">Critical</option>
              <option value="high">High</option>
              <option value="medium">Medium</option>
              <option value="low">Low</option>
            </select>
          </div>

          <div className="filter-group">
            <label className="filter-label">Type</label>
            <select 
              className="filter-select"
              value={filters.dependencyType}
              onChange={(e) => setFilters({...filters, dependencyType: e.target.value})}
            >
              <option value="all">All Dependencies</option>
              <option value="direct">Direct Only</option>
              <option value="transitive">Transitive Only</option>
            </select>
          </div>

          <div className="filter-group">
            <label className="filter-label">Maintenance</label>
            <select 
              className="filter-select"
              value={filters.maintainerStatus}
              onChange={(e) => setFilters({...filters, maintainerStatus: e.target.value})}
            >
              <option value="all">All Status</option>
              <option value="active">Active</option>
              <option value="deprecated">Deprecated</option>
              <option value="abandoned">Abandoned</option>
            </select>
          </div>
        </div>
      </div>

      {/* View Toggle */}
      <div className="view-toggle">
        <button 
          className={`view-option ${viewMode === 'graph' ? 'active' : ''}`}
          onClick={() => setViewMode('graph')}
        >
          Graph View
        </button>
        <button 
          className={`view-option ${viewMode === 'tree' ? 'active' : ''}`}
          onClick={() => setViewMode('tree')}
        >
          Tree View
        </button>
        <button 
          className={`view-option ${viewMode === 'list' ? 'active' : ''}`}
          onClick={() => setViewMode('list')}
        >
          List View
        </button>
      </div>

      {/* Main Content */}
      <div className="dependency-content">
        {viewMode === 'graph' && (
          <div className="graph-container">
            <svg ref={svgRef} width="800" height="600" className="dependency-graph"></svg>
          </div>
        )}
        
        {viewMode === 'tree' && renderTreeView()}
        
        {viewMode === 'list' && renderListView()}
      </div>

      {/* Package Details Modal */}
      {selectedPackage && (
        <div className="package-details-modal" onClick={() => setSelectedPackage(null)}>
          <div className="modal-content" onClick={(e) => e.stopPropagation()}>
            <div className="modal-header">
              <h3>{selectedPackage.packageName}</h3>
              <button className="modal-close" onClick={() => setSelectedPackage(null)}>×</button>
            </div>
            <div className="modal-body">
              <div className="package-info">
                <div className="info-row">
                  <span>Current Version:</span>
                  <span>{selectedPackage.version}</span>
                </div>
                <div className="info-row">
                  <span>Latest Version:</span>
                  <span>{selectedPackage.latestVersion}</span>
                </div>
                <div className="info-row">
                  <span>Ecosystem:</span>
                  <span>{selectedPackage.ecosystem}</span>
                </div>
                <div className="info-row">
                  <span>License:</span>
                  <span>{selectedPackage.license}</span>
                </div>
                <div className="info-row">
                  <span>Maintenance Status:</span>
                  <span className={`status-${selectedPackage.maintainerStatus}`}>
                    {selectedPackage.maintainerStatus}
                  </span>
                </div>
              </div>

              <div className="dependent-services">
                <h4>Used by Services:</h4>
                <div className="service-tags">
                  {selectedPackage.dependentServices.map(service => (
                    <span key={service} className="service-tag">{service}</span>
                  ))}
                </div>
              </div>

              <div className="package-vulnerabilities">
                <h4>Vulnerabilities ({selectedPackage.vulnerabilities.length})</h4>
                {selectedPackage.vulnerabilities.map(vuln => (
                  <div key={vuln.id} className={`vuln-detail ${vuln.severity}`}>
                    <div className="vuln-header">
                      <span className="vuln-title">{vuln.title}</span>
                      <span className={`severity-badge ${vuln.severity}`}>{vuln.severity}</span>
                      <span className="cvss-score">CVSS: {vuln.cvss}</span>
                    </div>
                    {vuln.cveId && <div className="cve-id">{vuln.cveId}</div>}
                    <div className="vuln-description">{vuln.description}</div>
                    <div className="vuln-fix">
                      {vuln.fixedVersion ? (
                        <span className="fix-available">
                          🔧 Fixed in version {vuln.fixedVersion}
                        </span>
                      ) : (
                        <span className="no-fix">⚠️ No fix available</span>
                      )}
                    </div>
                  </div>
                ))}
              </div>
            </div>
          </div>
        </div>
      )}

      {/* Tooltip */}
      <div ref={tooltipRef} className="graph-tooltip"></div>
    </div>
  );
};

export default DependencyVulnerabilityMap;